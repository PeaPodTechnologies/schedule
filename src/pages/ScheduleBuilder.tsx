import { FC, useState } from 'react';
import './ScheduleBuilder.css';
import InputBlock from '../molecules/InputBlock';
import AddParameter from '../molecules/AddParameter';
import ParameterBlock from '../molecules/ParameterBlock';

import { v4 as uuid } from 'uuid';

import { PEAPODAPI_REVISION, EnvironmentSchedule } from '@peapodtech/types';

type ScheduleBuilderProps = {};

const ScheduleBuilder: FC<ScheduleBuilderProps> = props => {
	const [schedule, setSchedule] = useState<EnvironmentSchedule>({
		id: 'peapod-schedule-' + uuid(),
		name: undefined,
		revision: PEAPODAPI_REVISION,
		parameters: {}
	});

	const downloadSchedule = () => {
		// BLOB-ify
		const blob = new Blob([JSON.stringify(schedule, null, 2)], { type: 'application/json' });

		// Give it a URL
		const href = URL.createObjectURL(blob);

		// Create a download button, click it, remove it, and clean up
		const a = document.createElement('a');
		a.href = href;
		a.download = `${schedule.id}.json`;
		document.body.appendChild(a);

		a.click();

		document.body.removeChild(a);
		URL.revokeObjectURL(href);
	};

	return (
		<div className="ScheduleBuilder">
			{/* NO input for ID, autogenerated */}
			<InputBlock label="id"></InputBlock>

			{/* add prop `onUpdate(name: string) => void` that sets schedule.name */}
			<InputBlock label="name"></InputBlock>

			{/* NO input, uses latest */}
			<InputBlock label="revision"></InputBlock>

			<AddParameter
				addParameter={parameter =>
					setSchedule(old => {
						let newParameters = { ...old.parameters };
						newParameters[parameter] = [];
						return { ...old, parameters: newParameters };
					})
				}
			/>

			<table>
				<thead></thead>
				<tbody>
					{Object.keys(schedule.parameters).map(parameter => (
						<ParameterBlock
							{...{
								parameter,
								updateType: type =>
									setSchedule(old => {
										let newParameters = { ...old.parameters };
										newParameters[parameter] = [];
										return old;
									})
							}}
						/>
					))}
				</tbody>
			</table>
			{/* DOWNLOAD BUTTON: Create a component with an `onClick: (void)=>void` callback parameter set to {downloadSchedule} */}
		</div>
	);

	// need an export to json function this function will look through its children and create a schedule.json from them
};

export default ScheduleBuilder;
