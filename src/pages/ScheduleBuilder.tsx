import { FC, useState } from 'react';
import './ScheduleBuilder.css';
import InputBlock from '../molecules/InputBlock';
import AddParameter from '../molecules/AddParameter';
import ParameterBlock, { PhaseTypes } from '../molecules/ParameterBlock';
import { v4 as uuid } from 'uuid';
import { PEAPODAPI_REVISION, EnvironmentSchedule, SchedulePhase } from '@peapodtech/types';

/**
 * this is a dummy SchedulePhase object
 */
const genericSchedulePhase: SchedulePhase = {
	type: PhaseTypes.PIECEWISE,
	end: 0,
	targets: []
};

enum ParameterTypes {
	AIRTEMPERATURE = 'Air Temperature',
	HUMIDITY = 'Humidity',
	UV = 'Light / UV'
	// other valid parameter types
}

type ScheduleBuilderProps = {};

/**
 * this object's purpose is to contain/manage it's parameter blocks. those parameter blocks will modify a parameter
 * to the user's desire.
 * 
 * it will have an export function that will turn all of the parameter blocks into a proper schedule format
 */
const ScheduleBuilder: FC<ScheduleBuilderProps> = props => {
	const [schedule, setSchedule] = useState<EnvironmentSchedule>({
        // the initial state of the object
		id: 'peapod-schedule-' + uuid(),
		name: undefined,
		revision: PEAPODAPI_REVISION,
		parameters: {}
	});

    // WIP: converting the parameterblocks into a proper EnvironmentSchedule, ignore
	const downloadSchedule = () => {
		// BLOB-ify
		const blob = new Blob([JSON.stringify(schedule, null, 2)], { type: 'application/json' });

		// Give it a URL
		const href = URL.createObjectURL(blob);

		// Create a download button, click it, remove it, and clean up
		const a = document.createElement('a');
		a.href = href;
		a.download = `${schedule.id}.json`;
		document.body.appendChild(a);

		a.click();

		document.body.removeChild(a);
		URL.revokeObjectURL(href);
	};

    // render function
	return (
		<div className="ScheduleBuilder">
			{/* NO input for ID, autogenerated */}
			<InputBlock
				value={schedule.id}
				label="id"
				onBlur={newId => {
					setSchedule(old => {
						let newSchedule = { ...old };

						// updating the id of the schedule
						newSchedule.id = newId;

						// returning the new state
						return newSchedule;
					});
				}}
			></InputBlock>

			{/* add prop `onUpdate(name: string) => void` that sets schedule.name */}
			<InputBlock
				value={schedule.name ?? ''}
				label="name"
				onBlur={newName => {
					setSchedule(old => {
						let newSchedule = { ...old };

						// updating the name of the schedule
						newSchedule.name = newName;

						// returning the new state
						return newSchedule;
					});
				}}
			></InputBlock>

			{/* NO input, uses latest */}
			<InputBlock readonly={true} label="revision" onBlur={() => null}></InputBlock>

            {/* the purpose of this is to add a new entry into the parameterblock array */}
			<AddParameter
				addParameter={() => {
					let parameterEntry = 'new_entry';
					setSchedule(old => {
						// getting all of the current parameters
						let newParameters = old.parameters;

						// generating a new id for the param so we don't overwrite any
						// previous ones
						newParameters[parameterEntry] = [genericSchedulePhase];

						// logging
						console.log(`added param '${parameterEntry}'`, newParameters);
						return { ...old, parameters: newParameters };
					});
				}}
			/>

			<table>
				<thead></thead>
				<tbody>
					{Object.keys(schedule.parameters).map((parameter, index) => (
                        // creating visual representations of each parameter
						<ParameterBlock
							{...{
                                // since each parameter is unique, we don't have to worry about being overwritten
								parameter: parameter,

                                // a function to change the phase type of a given parameter
								updateType: type =>
									setSchedule(old => {
										let newParameters = old.parameters;
										newParameters[parameter][index].type = type;
										return { ...old, parameters: newParameters };
									}),
                                // WIP: changing the parameter's name, ignore
								// updateParameter: (oldParameter, newParameter) => {
								// 	// setSchedule(old => {

								// 	// });
								// 	return undefined;
								// }
							}}
						/>
					))}
				</tbody>
			</table>
			{/* DOWNLOAD BUTTON: Create a component with an `onClick: (void)=>void` callback parameter set to {downloadSchedule} */}
		</div>
	);

	// need an export to json function this function will look through its children and create a schedule.json from them
};

export default ScheduleBuilder;
